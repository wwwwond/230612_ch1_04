# 슬라이싱
# 슬라이스 (slice)
# 시퀀스 자료형 -> 슬라이스 (slice) -> 무엇인가의 일부를 잘라낸다 -> 시퀀스 슬라이스 -> 시퀀스 객체의 일부를 잘라내는 것
# * 시퀀스객체[시작인덱스:끝인덱스]
a = list(range(0, 100, 10))
print(a)
print(a[3:8]) # 시작인덱스는 포함, 끝 인덱스는 포함하지 X <- range랑 비슷하구나...
print(a)
# 끝인덱스는 가져오려는 범위에 포함되지 X -> 실제로 가져오려는 인덱스보다 1 더 크게 지정.
print(len(a)) # 10 -> 인덱스? 9.
print(a[0:10]) # 인덱스의 범위를 벗어나서 호출 가능. (끝점이 미포함이라서...)
print(a[0:100]) # 시작점X. 끝점은 벗어나도 어차피 호출할 수 있는 건 정해져있어... 끝점은 len을 벗어나도 괜찮아요.
print()
print(a[0]) # 원소(요소) <-> 리스트 X.
print(a[0:1]) # 시퀀스[idx:idx+1] -> idx의 인덱스의 값만 가진 시퀀스.
print(a[1:1]) # 빈 값.

# 음수 인덱스 -> 슬라이스.
# 음수 인덱스 => len(...) - n.
print("a[4:-1] :", a[4:-1])
print("a[4:len(a)-1] :", a[4:len(a)-1])
print("a[-3:-1] :", a[-3:-1])

# 슬라이스 -> range랑 닮았다 (증가폭? 증감폭?)
print(a)
print(a[4:7])
print(a[4:7:1]) # 1? -> 인덱스를 1씩 증가하면서 복사해주겠다 -> 끝점 직전까지.
print(a[4:10:2]) # 2? -> 인덱스를 2씩 증가하면서 복사해주겠다 -> 끝점 직전까지.
print(a[7:4:-1]) # -1을 넣게 되면? -> 뒤집혀서 들어간다.
print(a[10:4:-2]) # -2

# 슬라이스에서 인덱스 생략
'''
슬라이스를 사용할 때 시작 인덱스와 끝 인덱스를 (둘 중하나 혹은 둘 다) 생략할 수 있음.
인덱스 생략 -> 시퀀스 전체의 길이를 몰라도 -> 끝까지 지정.
* 시퀀스객체[:끝인덱스] : 0번째 ~ 끝 인덱스 직전까지 / (0)
* 시퀀스객체[시작인덱스:] : 시작인덱스 ~ 나머지 전체 / (len(시퀀스객체))
'''
print("a", a)
print("a[0:7]", a[0:7])
print("a[:7]", a[:7])
print("a[4:len(a)]", a[4:len(a)])
print("a[4:]", a[4:])
print("a[:]", a[:], "a", a)
print("a[0:len(a)]", a[0:len(a)])

# 증가폭 사용시 생략을 할 때
'''
* 시퀀스객체[:끝인덱스:증가폭]
* 시퀀스객체[시작인덱스::증가폭]
* 시퀀스객체[::증가폭] *** = 0:len(시퀀스):증가폭.
* 시퀀스객체[::] = 시퀀스객체[:] = 시퀀스객체
'''
print(a[::2]) # 2의 배수의 인덱스를 지닌 값들을 조회
print(a[::-1]) # len(시퀀스):전체:-1 => 전체가 뒤집힌 값으로 제공
# 튜플, 문자열, 레인지도...

text = "사자는 오늘도 고기를 먹습니다"
print(text[::-1])
print(text[::2])
print(text[2:4])